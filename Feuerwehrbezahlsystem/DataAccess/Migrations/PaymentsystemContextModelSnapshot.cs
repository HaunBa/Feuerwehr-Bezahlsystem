// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PaymentsystemContext))]
    partial class PaymentsystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"), 1L, 1);

                    b.Property<string>("ArticleAmount")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("article_amount");

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("article_name");

                    b.Property<int>("PriceId")
                        .HasColumnType("int")
                        .HasColumnName("price_id");

                    b.HasKey("ArticleId");

                    b.HasIndex(new[] { "PriceId" }, "fk_Article_price1_idx");

                    b.ToTable("article", "paymentsystem");
                });

            modelBuilder.Entity("DataAccess.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<string>("PaymentDate")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentText")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("payment_text");

                    b.Property<string>("PaymentTotal")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("payment_total");

                    b.HasKey("PaymentId");

                    b.ToTable("payment", "paymentsystem");
                });

            modelBuilder.Entity("DataAccess.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("price_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<DateTime>("PriceSinceDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("price_sinceDate");

                    b.Property<DateTime?>("PriceUntilDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("price_untilDate");

                    b.Property<float>("PriceValue")
                        .HasColumnType("real")
                        .HasColumnName("price_value");

                    b.HasKey("PriceId");

                    b.ToTable("price", "paymentsystem");
                });

            modelBuilder.Entity("DataAccess.Models.Topup", b =>
                {
                    b.Property<int>("TopupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topup_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopupId"), 1L, 1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("TopupAmount")
                        .HasColumnType("int")
                        .HasColumnName("topup_amount");

                    b.Property<DateTime>("TopupDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("topup_date");

                    b.Property<string>("TopupExecutorId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("topup_executor_id");

                    b.HasKey("TopupId");

                    b.HasIndex(new[] { "TopupExecutorId" }, "fk_TopUps_User1_idx");

                    b.ToTable("topups", "paymentsystem");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_id");

                    b.Property<int>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OpenCheckoutAmount")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime?>("OpenCheckoutDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("UserId");

                    b.ToTable("user", "paymentsystem");
                });

            modelBuilder.Entity("PaymentHasArticle", b =>
                {
                    b.Property<int>("PaymentPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_payment_id");

                    b.Property<int>("ArticleArticleId")
                        .HasColumnType("int")
                        .HasColumnName("Article_article_id");

                    b.HasKey("PaymentPaymentId", "ArticleArticleId")
                        .HasName("PK_payment_has_article_Payment_payment_id");

                    b.HasIndex(new[] { "ArticleArticleId" }, "fk_Payment_has_Article_Article1_idx");

                    b.HasIndex(new[] { "PaymentPaymentId" }, "fk_Payment_has_Article_Payment1_idx");

                    b.ToTable("payment_has_article", "paymentsystem");
                });

            modelBuilder.Entity("UserHasPayment", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_id");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_id");

                    b.HasKey("UserId", "PaymentId")
                        .HasName("PK_user_has_payment_user_id");

                    b.HasIndex(new[] { "PaymentId" }, "fk_User_has_Payment_Payment1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_User_has_Payment_User1_idx");

                    b.ToTable("user_has_payment", "paymentsystem");
                });

            modelBuilder.Entity("UserHasTopup", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_id");

                    b.Property<int>("TopupId")
                        .HasColumnType("int")
                        .HasColumnName("topup_id");

                    b.HasKey("UserId", "TopupId")
                        .HasName("PK_user_has_topups_user_id");

                    b.HasIndex(new[] { "TopupId" }, "fk_User_has_TopUps_TopUps1_idx");

                    b.HasIndex(new[] { "UserId" }, "fk_User_has_TopUps_User1_idx");

                    b.ToTable("user_has_topups", "paymentsystem");
                });

            modelBuilder.Entity("DataAccess.Models.Article", b =>
                {
                    b.HasOne("DataAccess.Models.Price", "Price")
                        .WithMany("Articles")
                        .HasForeignKey("PriceId")
                        .IsRequired()
                        .HasConstraintName("article$fk_Article_price1");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("DataAccess.Models.Topup", b =>
                {
                    b.HasOne("DataAccess.Models.User", "TopupExecutor")
                        .WithMany("Topups")
                        .HasForeignKey("TopupExecutorId")
                        .IsRequired()
                        .HasConstraintName("topups$fk_TopUps_User1");

                    b.Navigation("TopupExecutor");
                });

            modelBuilder.Entity("PaymentHasArticle", b =>
                {
                    b.HasOne("DataAccess.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleArticleId")
                        .IsRequired()
                        .HasConstraintName("payment_has_article$fk_Payment_has_Article_Article1");

                    b.HasOne("DataAccess.Models.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentPaymentId")
                        .IsRequired()
                        .HasConstraintName("payment_has_article$fk_Payment_has_Article_Payment1");
                });

            modelBuilder.Entity("UserHasPayment", b =>
                {
                    b.HasOne("DataAccess.Models.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("user_has_payment$fk_User_has_Payment_Payment1");

                    b.HasOne("DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_has_payment$fk_User_has_Payment_User1");
                });

            modelBuilder.Entity("UserHasTopup", b =>
                {
                    b.HasOne("DataAccess.Models.Topup", null)
                        .WithMany()
                        .HasForeignKey("TopupId")
                        .IsRequired()
                        .HasConstraintName("user_has_topups$fk_User_has_TopUps_TopUps1");

                    b.HasOne("DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_has_topups$fk_User_has_TopUps_User1");
                });

            modelBuilder.Entity("DataAccess.Models.Price", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Navigation("Topups");
                });
#pragma warning restore 612, 618
        }
    }
}
