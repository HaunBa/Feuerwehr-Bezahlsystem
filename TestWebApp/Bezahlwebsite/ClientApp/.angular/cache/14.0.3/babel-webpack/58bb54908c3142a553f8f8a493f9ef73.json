{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Haunschmied.Bastian/Documents/GitHub/Feuerwehr-Bezahlsystem/TestWebApp/Bezahlwebsite/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { LogoutActions, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\"; // The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\n\nexport class LogoutComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n\n      switch (action.path) {\n        case LogoutActions.Logout:\n          if (!!window.history.state.local) {\n            yield _this.logout(_this.getReturnUrl());\n          } else {\n            // This prevents regular links to <app>/authentication/logout from triggering a logout\n            _this.message.next('The logout was not initiated from within the page.');\n          }\n\n          break;\n\n        case LogoutActions.LogoutCallback:\n          yield _this.processLogoutCallback();\n          break;\n\n        case LogoutActions.LoggedOut:\n          _this.message.next('You successfully logged out!');\n\n          break;\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n\n  logout(returnUrl) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const isauthenticated = yield _this2.authorizeService.isAuthenticated().pipe(take(1)).toPromise();\n\n      if (isauthenticated) {\n        const result = yield _this2.authorizeService.signOut(state);\n\n        switch (result.status) {\n          case AuthenticationResultStatus.Redirect:\n            break;\n\n          case AuthenticationResultStatus.Success:\n            yield _this2.navigateToReturnUrl(returnUrl);\n            break;\n\n          case AuthenticationResultStatus.Fail:\n            _this2.message.next(result.message);\n\n            break;\n\n          default:\n            throw new Error('Invalid authentication result status.');\n        }\n      } else {\n        _this2.message.next('You successfully logged out!');\n      }\n    })();\n  }\n\n  processLogoutCallback() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignOut(url);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as the only time completeAuthentication finishes\n          // is when we are doing a redirect sign in flow.\n          throw new Error('Should not redirect.');\n\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n\n          break;\n\n        default:\n          throw new Error('Invalid authentication result status.');\n      }\n    })();\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl; // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n\n    return state && state.returnUrl || fromQuery || ApplicationPaths.LoggedOut;\n  }\n\n}\n\nLogoutComponent.ɵfac = function LogoutComponent_Factory(t) {\n  return new (t || LogoutComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLogoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LogoutComponent,\n  selectors: [[\"app-logout\"]],\n  decls: 3,\n  vars: 3,\n  template: function LogoutComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\n    }\n  },\n  dependencies: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dvdXQuY29tcG9uZW50LmNzcyJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["AuthenticationResultStatus","BehaviorSubject","take","LogoutActions","ApplicationPaths","ReturnUrlType","LogoutComponent","constructor","authorizeService","activatedRoute","router","ngOnInit","action","snapshot","url","path","Logout","window","history","state","local","logout","getReturnUrl","message","next","LogoutCallback","processLogoutCallback","LoggedOut","Error","returnUrl","isauthenticated","isAuthenticated","pipe","toPromise","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","location","href","completeSignOut","navigateByUrl","replaceUrl","fromQuery","queryParams","startsWith","origin","test","i0","selectors","decls","vars","template"],"sourceRoot":"","sources":["C:\\Users\\Haunschmied.Bastian\\Documents\\GitHub\\Feuerwehr-Bezahlsystem\\TestWebApp\\Bezahlwebsite\\ClientApp\\src\\api-authorization\\logout\\logout.component.ts","C:\\Users\\Haunschmied.Bastian\\Documents\\GitHub\\Feuerwehr-Bezahlsystem\\TestWebApp\\Bezahlwebsite\\ClientApp\\src\\api-authorization\\logout\\logout.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationResultStatus, AuthorizeService } from '../authorize.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { LogoutActions, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\n\r\n// The main responsibility of this component is to handle the user's logout process.\r\n// This is the starting point for the logout process, which is usually initiated when a\r\n// user clicks on the logout button on the LoginMenu component.\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.css']\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n  public message = new BehaviorSubject<string | null>(null);\r\n\r\n  constructor(\r\n    private authorizeService: AuthorizeService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  async ngOnInit() {\r\n    const action = this.activatedRoute.snapshot.url[1];\r\n    switch (action.path) {\r\n      case LogoutActions.Logout:\r\n        if (!!window.history.state.local) {\r\n          await this.logout(this.getReturnUrl());\r\n        } else {\r\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\r\n          this.message.next('The logout was not initiated from within the page.');\r\n        }\r\n\r\n        break;\r\n      case LogoutActions.LogoutCallback:\r\n        await this.processLogoutCallback();\r\n        break;\r\n      case LogoutActions.LoggedOut:\r\n        this.message.next('You successfully logged out!');\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid action '${action}'`);\r\n    }\r\n  }\r\n\r\n  private async logout(returnUrl: string): Promise<void> {\r\n    const state: INavigationState = { returnUrl };\r\n    const isauthenticated = await this.authorizeService.isAuthenticated().pipe(\r\n      take(1)\r\n    ).toPromise();\r\n    if (isauthenticated) {\r\n      const result = await this.authorizeService.signOut(state);\r\n      switch (result.status) {\r\n        case AuthenticationResultStatus.Redirect:\r\n          break;\r\n        case AuthenticationResultStatus.Success:\r\n          await this.navigateToReturnUrl(returnUrl);\r\n          break;\r\n        case AuthenticationResultStatus.Fail:\r\n          this.message.next(result.message);\r\n          break;\r\n        default:\r\n          throw new Error('Invalid authentication result status.');\r\n      }\r\n    } else {\r\n      this.message.next('You successfully logged out!');\r\n    }\r\n  }\r\n\r\n  private async processLogoutCallback(): Promise<void> {\r\n    const url = window.location.href;\r\n    const result = await this.authorizeService.completeSignOut(url);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        // There should not be any redirects as the only time completeAuthentication finishes\r\n        // is when we are doing a redirect sign in flow.\r\n        throw new Error('Should not redirect.');\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        this.message.next(result.message);\r\n        break;\r\n      default:\r\n        throw new Error('Invalid authentication result status.');\r\n    }\r\n  }\r\n\r\n  private async navigateToReturnUrl(returnUrl: string) {\r\n    await this.router.navigateByUrl(returnUrl, {\r\n      replaceUrl: true\r\n    });\r\n  }\r\n\r\n  private getReturnUrl(state?: INavigationState): string {\r\n    const fromQuery = (this.activatedRoute.snapshot.queryParams as INavigationState).returnUrl;\r\n    // If the url is coming from the query string, check that is either\r\n    // a relative url or an absolute url\r\n    if (fromQuery &&\r\n      !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n        /\\/[^\\/].*/.test(fromQuery))) {\r\n      // This is an extra check to prevent open redirects.\r\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n    }\r\n    return (state && state.returnUrl) ||\r\n      fromQuery ||\r\n      ApplicationPaths.LoggedOut;\r\n  }\r\n}\r\n\r\ninterface INavigationState {\r\n  [ReturnUrlType]: string;\r\n}\r\n","<p>{{ message | async }}</p>"]},"metadata":{},"sourceType":"module"}