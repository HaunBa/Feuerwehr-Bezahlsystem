{"ast":null,"code":"import { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authorize.service\";\nexport let AuthorizeInterceptor = /*#__PURE__*/(() => {\n  class AuthorizeInterceptor {\n    constructor(authorize) {\n      this.authorize = authorize;\n    }\n\n    intercept(req, next) {\n      return this.authorize.getAccessToken().pipe(mergeMap(token => this.processRequestWithToken(token, req, next)));\n    } // Checks if there is an access_token available in the authorize service\n    // and adds it to the request in case it's targeted at the same origin as the\n    // single page application.\n\n\n    processRequestWithToken(token, req, next) {\n      if (!!token && this.isSameOriginUrl(req)) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n\n      return next.handle(req);\n    }\n\n    isSameOriginUrl(req) {\n      // It's an absolute url with the same origin.\n      if (req.url.startsWith(`${window.location.origin}/`)) {\n        return true;\n      } // It's a protocol relative url with the same origin.\n      // For example: //www.example.com/api/Products\n\n\n      if (req.url.startsWith(`//${window.location.host}/`)) {\n        return true;\n      } // It's a relative url like /api/Products\n\n\n      if (/^\\/[^\\/].*/.test(req.url)) {\n        return true;\n      } // It's an absolute or protocol relative url that\n      // doesn't have the same origin.\n\n\n      return false;\n    }\n\n  }\n\n  AuthorizeInterceptor.ɵfac = function AuthorizeInterceptor_Factory(t) {\n    return new (t || AuthorizeInterceptor)(i0.ɵɵinject(i1.AuthorizeService));\n  };\n\n  AuthorizeInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeInterceptor,\n    factory: AuthorizeInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizeInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}