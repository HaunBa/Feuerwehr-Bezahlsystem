{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { ApplicationPaths, QueryParameterNames } from './api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authorize.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthorizeGuard = /*#__PURE__*/(() => {\n  class AuthorizeGuard {\n    constructor(authorize, router) {\n      this.authorize = authorize;\n      this.router = router;\n    }\n\n    canActivate(_next, state) {\n      return this.authorize.isAuthenticated().pipe(tap(isAuthenticated => this.handleAuthorization(isAuthenticated, state)));\n    }\n\n    handleAuthorization(isAuthenticated, state) {\n      if (!isAuthenticated) {\n        this.router.navigate(ApplicationPaths.LoginPathComponents, {\n          queryParams: {\n            [QueryParameterNames.ReturnUrl]: state.url\n          }\n        });\n      }\n    }\n\n  }\n\n  AuthorizeGuard.ɵfac = function AuthorizeGuard_Factory(t) {\n    return new (t || AuthorizeGuard)(i0.ɵɵinject(i1.AuthorizeService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthorizeGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeGuard,\n    factory: AuthorizeGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizeGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}